import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import NearestNeighbors
import os
import sys

# Global variable to store the original dataframe for recommendations
original_df = None


# PHASE 1: LOAD DATA, EXPLORE AND CLEAN DATASET
def load_and_explore_data(file_path):
    """Load and clean the dataset from a CSV file."""
    print("Data is loading...")

    try:
        # Try to infer separator automatically
        df = pd.read_csv(file_path)

        # If the data didn't load properly (only one column), try tab separator
        if len(df.columns) == 1:
            df = pd.read_csv(file_path, sep='\t')

        print(f"Dataset loaded successfully with shape: {df.shape}")

        # Convert height from meters to cm if necessary
        if 'Height' in df.columns and df['Height'].max() < 3:  # If height is in meters
            df['Height'] = df['Height'] * 100
            print("Height converted from meters to centimeters")

        # Check for duplicates
        dup_count = df.duplicated().sum()
        if dup_count > 0:
            print(f"Found {dup_count} duplicate rows - removing duplicates")
            df = df.drop_duplicates()

        # Create a copy to avoid modifying views
        df = df.copy()

        # Check missing values
        missing_before = df.isnull().sum().sum()
        if missing_before > 0:
            print(f"Found {missing_before} missing values - cleaning data")

            # Fill missing values in numerical columns
            for col in df.select_dtypes(include=['number']).columns:
                if df[col].isnull().sum() > 0:
                    df[col] = df[col].fillna(df[col].median())

            # Fill missing values in categorical columns
            category_cols = df.select_dtypes(include=['object']).columns
            for col in category_cols:
                if df[col].isnull().sum() > 0:
                    df[col] = df[col].fillna(df[col].mode()[0] if not df[col].mode().empty else "Unknown")

        # Handle BMI calculation
        if 'BMI' not in df.columns and 'Height' in df.columns and 'Weight' in df.columns:
            df['BMI'] = df['Weight'] / ((df['Height'] / 100) ** 2)
            print("BMI calculated from height and weight")
        elif 'BMI' in df.columns:
            # Fill missing BMI values
            mask = df['BMI'].isnull()
            if mask.any() and 'Height' in df.columns and 'Weight' in df.columns:
                df.loc[mask, 'BMI'] = df.loc[mask, 'Weight'] / ((df.loc[mask, 'Height'] / 100) ** 2)

        # Use 'Level' column as BMI level if available, otherwise calculate
        if 'Level' in df.columns:
            df['BMI Level'] = df['Level']
        elif 'BMI' in df.columns:
            # Add BMI Level if not present
            df['BMI Level'] = pd.cut(
                df['BMI'],
                bins=[0, 18.5, 24.9, 29.9, 100],
                labels=['Underweight', 'Normal', 'Overweight', 'Obese']
            )
            print("BMI Level categorized based on BMI values")

        # Map categorical values to numerical for model training if present
        if 'Sex' in df.columns:
            sex_mapping = {'Male': 1, 'Female': 0}
            df['Sex'] = df['Sex'].map(lambda x: sex_mapping.get(x, np.nan))
            df['Sex'] = df['Sex'].fillna(df['Sex'].median())

        if 'Hypertension' in df.columns:
            yn_mapping = {'Yes': 1, 'No': 0}
            df['Hypertension'] = df['Hypertension'].map(lambda x: yn_mapping.get(x, np.nan))
            df['Hypertension'] = df['Hypertension'].fillna(0)  # Default to no hypertension

        if 'Diabetes' in df.columns:
            df['Diabetes'] = df['Diabetes'].map(lambda x: yn_mapping.get(x, np.nan))
            df['Diabetes'] = df['Diabetes'].fillna(0)  # Default to no diabetes

        # Check final missing values
        missing_after = df.isnull().sum().sum()
        if missing_after > 0:
            print(f"Warning: {missing_after} missing values remain after cleaning")
            print(df.isnull().sum())
        else:
            print("Data cleaning complete - no missing values remain")

        return df

    except Exception as e:
        print(f"Error loading data: {str(e)}")
        print("Please make sure the file exists and is in the correct format")
        return None


# PHASE 2: FEATURE ENGINEERING
def feature_engineering(df):
    """Add new features to improve recommendation quality."""
    if df is None:
        print("No data available for feature engineering")
        return None

    print("\nPerforming feature engineering...")
    df = df.copy()

    # Create age groups if Age column exists
    if 'Age' in df.columns:
        df['Age_Group'] = pd.cut(
            df['Age'],
            bins=[0, 18, 35, 50, 65, 100],
            labels=['Teen', 'Young_Adult', 'Adult', 'Middle_Age', 'Senior']
        )
        print("Age groups created")

    # Initialize health risk score
    df['Health_Risk_Score'] = 0
    risk_score = df['Health_Risk_Score'].copy()

    # Update health risk scores based on available fields
    if 'Hypertension' in df.columns:
        risk_score = np.where(df['Hypertension'] == 1, risk_score + 1, risk_score)

    if 'Diabetes' in df.columns:
        risk_score = np.where(df['Diabetes'] == 1, risk_score + 1, risk_score)

    if 'BMI' in df.columns:
        risk_score = np.where(df['BMI'] < 18.5, risk_score + 1, risk_score)
        risk_score = np.where(df['BMI'] > 30, risk_score + 1, risk_score)
        risk_score = np.where(df['BMI'] > 35, risk_score + 1, risk_score)

    df['Health_Risk_Score'] = risk_score
    print("Health risk scores calculated")

    # One-hot encode categorical features
    categorical_columns = []

    # Check if columns exist before adding them to encoding list
    for col in ['BMI Level', 'Age_Group', 'Fitness Type', 'Fitness Goal']:
        if col in df.columns:
            categorical_columns.append(col)

    # Only apply one-hot encoding if we have categorical columns
    if categorical_columns:
        print(f"One-hot encoding categorical features: {', '.join(categorical_columns)}")
        dummies_df = pd.get_dummies(df[categorical_columns], prefix=categorical_columns)
        df_numeric = df.drop(categorical_columns, axis=1)
        df_final = pd.concat([df_numeric, dummies_df], axis=1)
    else:
        df_final = df
        print("No categorical columns found for one-hot encoding")

    print(f"Feature engineering complete. Dataset shape: {df_final.shape}")
    return df_final


# PHASE 3: MODEL DEVELOPMENT - K-NEAREST NEIGHBORS APPROACH
def prepare_data_for_knn(df):
    """Prepare data for K-Nearest Neighbors model."""
    if df is None:
        print("No data available for KNN preparation")
        return None, None, None

    print("\nPreparing data for KNN model...")
    global original_df
    original_df = df.copy()

    # Select available features for similarity calculation
    base_features = ['Age', 'Height', 'Weight', 'BMI', 'Health_Risk_Score']
    optional_features = ['Sex', 'Hypertension', 'Diabetes']

    # Filter to only include features that exist in the dataframe
    numerical_features = [f for f in base_features + optional_features if f in df.columns]
    print(f"Using numerical features: {', '.join(numerical_features)}")

    # Get dummy columns for categorical variables
    dummy_prefixes = ['BMI Level_', 'Fitness Goal_', 'Fitness Type_', 'Age_Group_']
    dummy_features = [col for col in df.columns if
                      any(col.startswith(prefix) for prefix in dummy_prefixes)]

    if dummy_features:
        print(f"Using {len(dummy_features)} one-hot encoded features")

    features = numerical_features + dummy_features

    # Make sure all features exist in the dataframe
    features = [f for f in features if f in df.columns]

    if not features:
        print("Error: No valid features found for KNN model")
        return None, None, None

    # Extract features
    X = df[features].copy()

    # Fill any remaining NaN values with median for numeric columns
    for col in X.select_dtypes(include=['number']).columns:
        X[col] = X[col].fillna(X[col].median())

    # Fill any remaining NaN values with 0 for dummy columns
    for col in dummy_features:
        if col in X.columns:
            X[col] = X[col].fillna(0)

    # Standardize numerical features
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    print(f"Data prepared successfully with {X.shape[1]} features")

    return X_scaled, features, scaler


def train_knn_model(X_scaled, n_neighbors=3):
    """Train a K-Nearest Neighbors model."""
    if X_scaled is None:
        print("No scaled data available for KNN model training")
        return None

    print(f"\nTraining KNN model with {n_neighbors} neighbors...")
    try:
        # Train KNN model
        knn_model = NearestNeighbors(n_neighbors=n_neighbors, algorithm='auto')
        knn_model.fit(X_scaled)
        print("KNN model trained successfully")
        return knn_model
    except Exception as e:
        print(f"Error training KNN model: {str(e)}")
        return None


# Function to preprocess new user data for KNN
def preprocess_user_for_knn(user_data, features, scaler):
    """Process user input data to make it compatible with the KNN model."""
    if not user_data or not features or not scaler:
        print("Missing data for user preprocessing")
        return None

    print("\nProcessing your profile for the recommendation system...")
    user_df = pd.DataFrame([user_data])

    # Calculate BMI if not present
    if 'BMI' not in user_df.columns and 'Height' in user_df.columns and 'Weight' in user_df.columns:
        user_df['BMI'] = user_df['Weight'] / ((user_df['Height'] / 100) ** 2)
        print(f"Your BMI has been calculated as {user_df['BMI'].values[0]:.2f}")

    # Add BMI Level if needed
    if 'BMI Level' not in user_df.columns and 'BMI' in user_df.columns:
        user_df['BMI Level'] = pd.cut(
            user_df['BMI'],
            bins=[0, 18.5, 24.9, 29.9, 100],
            labels=['Underweight', 'Normal', 'Overweight', 'Obese']
        )
        print(f"Your BMI category: {user_df['BMI Level'].values[0]}")

    # Create age groups if needed
    if 'Age_Group' not in user_df.columns and 'Age' in user_df.columns:
        user_df['Age_Group'] = pd.cut(
            user_df['Age'],
            bins=[0, 18, 35, 50, 65, 100],
            labels=['Teen', 'Young_Adult', 'Adult', 'Middle_Age', 'Senior']
        )

    # Initialize health risk score
    user_df['Health_Risk_Score'] = 0
    risk_score = user_df['Health_Risk_Score'].copy()

    # Update health risk based on available data
    if 'Hypertension' in user_df.columns:
        risk_score = np.where(user_df['Hypertension'] == 1, risk_score + 1, risk_score)
    if 'Diabetes' in user_df.columns:
        risk_score = np.where(user_df['Diabetes'] == 1, risk_score + 1, risk_score)
    if 'BMI' in user_df.columns:
        risk_score = np.where(user_df['BMI'] < 18.5, risk_score + 1, risk_score)
        risk_score = np.where(user_df['BMI'] > 30, risk_score + 1, risk_score)
        risk_score = np.where(user_df['BMI'] > 35, risk_score + 1, risk_score)

    user_df['Health_Risk_Score'] = risk_score

    # One-hot encode categorical columns
    for col in ['BMI Level', 'Fitness Goal', 'Fitness Type', 'Age_Group']:
        if col in user_df.columns:
            dummies = pd.get_dummies(user_df[col], prefix=col)
            user_df = pd.concat([user_df, dummies], axis=1)
            user_df = user_df.drop(col, axis=1)

    # Create feature vector with same columns as training data
    feature_vector = pd.DataFrame(columns=features)

    # Fill in available features
    for feature in features:
        if feature in user_df.columns:
            feature_vector[feature] = user_df[feature]
        else:
            feature_vector[feature] = 0  # Default value for missing features

    # Scale the feature vector
    try:
        feature_vector_scaled = scaler.transform(feature_vector)
        print("Your profile has been successfully processed")
        return feature_vector_scaled
    except Exception as e:
        print(f"Error processing your profile: {str(e)}")
        return None


# Generate recommendations using KNN
def generate_knn_recommendations(knn_model, user_data, features, scaler, n_recommendations=3):
    """Generate fitness recommendations based on similar profiles."""
    if knn_model is None or user_data is None:
        print("Missing model or user data for recommendations")
        return []

    print("\nFinding similar profiles for recommendations...")
    user_vector = preprocess_user_for_knn(user_data, features, scaler)

    if user_vector is None:
        return []

    try:
        # Find nearest neighbors
        distances, indices = knn_model.kneighbors(user_vector)

        # Get recommendations from nearest neighbors
        recommendations = []
        for i in range(min(len(indices[0]), n_recommendations)):
            idx = indices[0][i]
            profile = original_df.iloc[idx]

            # Create a recommendation dictionary with available fields
            recommendation = {
                'Similarity': 1 - distances[0][i],  # Convert distance to similarity score
                'Profile ID': idx
            }

            # Add available fields from the profile
            for field in ['Exercises', 'Equipment', 'Diet (Vegetable)',
                          'Diet (protein intake)', 'Diet (Juice)', 'Recommendation']:
                if field in profile and pd.notna(profile[field]):
                    recommendation[field] = profile[field]
                else:
                    recommendation[field] = "No recommendation available"

            recommendations.append(recommendation)

        print(f"Found {len(recommendations)} similar profiles")
        return recommendations
    except Exception as e:
        print(f"Error generating recommendations: {str(e)}")
        return []


# Generate personalized recommendations by blending multiple neighbors
def generate_personalized_recommendation(recommendations, user_data):
    """Create a personalized recommendation based on similar profiles and user data."""
    if not recommendations:
        return {}

    print("\nCreating your personalized fitness plan...")
    top_rec = recommendations[0]

    # Create personalized recommendation with available fields
    personalized = {}
    for field in ['Exercises', 'Equipment', 'Diet (Vegetable)',
                  'Diet (protein intake)', 'Diet (Juice)', 'Recommendation']:
        if field in top_rec:
            personalized[field] = top_rec[field]
        else:
            personalized[field] = "No recommendation available"

    # Add health-specific modifications
    if user_data.get('Hypertension', 0) == 1:
        personalized['Diet (Vegetable)'] += " (Low sodium options recommended)"
        personalized['Recommendation'] += " Monitor blood pressure regularly during exercise."

    if user_data.get('Diabetes', 0) == 1:
        personalized['Diet (Juice)'] += " (Sugar-free or diluted options only)"
        personalized['Recommendation'] += " Check blood sugar before and after workouts."

    # Customize based on fitness goal
    goal = user_data.get('Fitness Goal', '')
    if goal:
        if 'Weight Loss' in goal:
            personalized['Exercises'] += " Focus on higher repetitions with moderate weight."
        elif 'Weight Gain' in goal:
            personalized['Exercises'] += " Focus on progressive overload with heavier weights."
        elif 'Muscular Fitness' in goal:
            personalized['Exercises'] += " Focus on compound movements and progressive resistance training."

    # Customize based on age
    age = user_data.get('Age', None)
    if age is not None:
        if age > 60:
            personalized['Equipment'] += " Consider using equipment with better joint support."
        elif age < 18:
            personalized['Equipment'] += " Start with bodyweight exercises before progressing to weights."

    print("Personalized plan created successfully")
    return personalized


# Function to explain recommendation with more personalization
def explain_personalized_recommendation(recommendation, user_data):
    """Create a personalized explanation of the recommendation."""
    if not recommendation or not user_data:
        return "Unable to generate explanation with insufficient data."

    explanation = f"Based on your unique profile, we've created a personalized recommendation:\n\n"

    # Explain based on key metrics
    bmi = user_data.get('BMI', None)
    if bmi is not None:
        if bmi < 18.5:
            explanation += f"BMI Status: Your BMI of {bmi:.1f} indicates you're underweight. This plan focuses on building strength and healthy weight gain.\n\n"
        elif bmi >= 25 and bmi < 30:
            explanation += f"BMI Status: Your BMI of {bmi:.1f} indicates you're overweight. This plan balances cardio and strength training for optimal weight management.\n\n"
        elif bmi >= 30:
            explanation += f"BMI Status: Your BMI of {bmi:.1f} indicates obesity. This plan prioritizes joint-friendly exercises and nutritional guidance.\n\n"
        else:
            explanation += f"BMI Status: Your BMI of {bmi:.1f} is in the normal range. This plan focuses on maintaining your healthy weight while improving fitness.\n\n"

    # Explain based on health conditions
    health_conditions = []
    if user_data.get('Hypertension', 0) == 1:
        health_conditions.append("hypertension")
    if user_data.get('Diabetes', 0) == 1:
        health_conditions.append("diabetes")

    if health_conditions:
        explanation += f"Health Considerations: Your plan is adjusted for {', '.join(health_conditions)}, with appropriate intensity levels and dietary recommendations.\n\n"

    # Explain based on age
    age = user_data.get('Age', None)
    if age is not None:
        if age < 18:
            explanation += f"Age Consideration: At {age} years old, this plan focuses on fundamentals, proper form, and developing healthy habits.\n\n"
        elif age > 65:
            explanation += f"Age Consideration: At {age} years old, this plan emphasizes joint health, flexibility, and appropriate intensity levels.\n\n"
        else:
            explanation += f"Age Consideration: At {age} years old, this plan balances challenge and sustainability for long-term health.\n\n"

    # Explain based on fitness goal
    fitness_goal = user_data.get('Fitness Goal', None)
    if fitness_goal:
        explanation += f"Fitness Goal: Your goal of '{fitness_goal}' is the foundation of this recommendation, with specific exercise patterns and nutritional guidance to support it.\n\n"

    return explanation


# Function to get user input with validation
def get_user_input():
    """Collect and validate user input for a fitness recommendation."""
    user_data = {}

    print("\n--- Please enter your personal information ---")

    # Get gender input
    gender = input("Enter your gender (Male/Female) or press Enter to skip: ").strip().capitalize()
    if gender in ['Male', 'Female']:
        user_data['Sex'] = 1 if gender == 'Male' else 0

    # Get age input with validation
    while True:
        age_input = input("Enter your age (years) or press Enter to skip: ").strip()
        if not age_input:
            break
        try:
            age = int(age_input)
            if 10 <= age <= 100:
                user_data['Age'] = age
                break
            else:
                print("Please enter a valid age between 10 and 100 years.")
        except ValueError:
            print("Please enter a valid number for age.")

    # Get height input with validation
    while True:
        height_input = input("Enter your height (cm) or press Enter to skip: ").strip()
        if not height_input:
            break
        try:
            height = float(height_input)
            if 100 <= height <= 220:
                user_data['Height'] = height
                break
            else:
                print("Please enter a valid height between 100 and 220 cm.")
        except ValueError:
            print("Please enter a valid number for height.")

    # Get weight input with validation
    while True:
        weight_input = input("Enter your weight (kg) or press Enter to skip: ").strip()
        if not weight_input:
            break
        try:
            weight = float(weight_input)
            if 30 <= weight <= 250:
                user_data['Weight'] = weight
                break
            else:
                print("Please enter a valid weight between 30 and 250 kg.")
        except ValueError:
            print("Please enter a valid number for weight.")

    # Calculate BMI if possible
    if 'Height' in user_data and 'Weight' in user_data:
        bmi = user_data['Weight'] / ((user_data['Height'] / 100) ** 2)
        user_data['BMI'] = bmi
        print(f"Your calculated BMI is: {bmi:.2f}")

        # Set BMI Level based on calculated BMI
        if bmi < 18.5:
            user_data['BMI Level'] = 'Underweight'
        elif bmi < 25:
            user_data['BMI Level'] = 'Normal'
        elif bmi < 30:
            user_data['BMI Level'] = 'Overweight'
        else:
            user_data['BMI Level'] = 'Obese'
        print(f"Your BMI category: {user_data['BMI Level']}")

    # Health conditions with validation
    while True:
        hypertension = input("Do you have hypertension (Yes/No) or press Enter to skip: ").strip().capitalize()
        if not hypertension or hypertension in ['Yes', 'No']:
            if hypertension == 'Yes':
                user_data['Hypertension'] = 1
            elif hypertension == 'No':
                user_data['Hypertension'] = 0
            break
        else:
            print("Please enter Yes or No for hypertension.")

    while True:
        diabetes = input("Do you have diabetes (Yes/No) or press Enter to skip: ").strip().capitalize()
        if not diabetes or diabetes in ['Yes', 'No']:
            if diabetes == 'Yes':
                user_data['Diabetes'] = 1
            elif diabetes == 'No':
                user_data['Diabetes'] = 0
            break
        else:
            print("Please enter Yes or No for diabetes.")

    # Fitness goals
    print("\nFitness Goals:")
    print("1. Weight Loss")
    print("2. Weight Gain")
    print("3. Muscular Fitness")
    print("4. Overall Health")

    goals = {
        '1': 'Weight Loss',
        '2': 'Weight Gain',
        '3': 'Muscular Fitness',
        '4': 'Overall Health'
    }

    while True:
        goal_choice = input("Choose your fitness goal (1-4) or press Enter to skip: ").strip()
        if not goal_choice:
            break
        if goal_choice in goals:
            user_data['Fitness Goal'] = goals[goal_choice]
            break
        else:
            print("Please enter a number between 1 and 4.")

    # Validate if we have enough data
    required_fields = ['Age', 'Height', 'Weight']
    missing_fields = [field for field in required_fields if field not in user_data]

    if missing_fields:
        print(f"\nWarning: Missing recommended data: {', '.join(missing_fields)}")
        print("Recommendations may be less accurate without this information.")
        proceed = input("Would you like to continue anyway? (Yes/No): ").strip().lower()
        if proceed != 'yes':
            print("Please try again with more complete information.")
            return get_user_input()

    return user_data


# Function to format the final recommendation for display
def format_personalized_recommendation(recommendation, explanation):
    """Format the recommendation for display."""
    if not recommendation:
        return "Unable to generate a recommendation with the provided data."

    formatted = "\n===== PERSONALIZED FITNESS RECOMMENDATION =====\n\n"
    formatted += explanation + "\n"

    if 'Exercises' in recommendation and recommendation['Exercises']:
        formatted += "EXERCISE PLAN:\n"
        formatted += f"{recommendation['Exercises']}\n\n"

    if 'Equipment' in recommendation and recommendation['Equipment']:
        formatted += "RECOMMENDED EQUIPMENT:\n"
        formatted += f"{recommendation['Equipment']}\n\n"

    formatted += "PERSONALIZED NUTRITION PLAN:\n"

    if 'Diet (Vegetable)' in recommendation and recommendation['Diet (Vegetable)']:
        formatted += f"Vegetables: {recommendation['Diet (Vegetable)']}\n"

    if 'Diet (protein intake)' in recommendation and recommendation['Diet (protein intake)']:
        formatted += f"Protein: {recommendation['Diet (protein intake)']}\n"

    if 'Diet (Juice)' in recommendation and recommendation['Diet (Juice)']:
        formatted += f"Juice: {recommendation['Diet (Juice)']}\n\n"

    if 'Recommendation' in recommendation and recommendation['Recommendation']:
        formatted += "GENERAL ADVICE:\n"
        formatted += f"{recommendation['Recommendation']}\n\n"

    return formatted


def main():
    """Main function to run the fitness recommendation system."""
    print("====== FITNESS RECOMMENDATION SYSTEM ======\n")

    try:
        # Check if the dataset directory exists
        dataset_dir = "./Dataset"
        if not os.path.exists(dataset_dir):
            os.makedirs(dataset_dir)
            print(f"Created directory {dataset_dir}")

        # File path
        file_path = "Dataset/gym_recommendation.csv"

        # Check if the file exists
        if not os.path.isfile(file_path):
            print(f"File not found: {file_path}")
            # Try to find any CSV file in the Dataset directory
            csv_files = [f for f in os.listdir(dataset_dir) if f.endswith('.csv')]

            if csv_files:
                file_path = os.path.join(dataset_dir, csv_files[0])
                print(f"Using alternative file: {file_path}")
            else:
                print("No CSV files found in the Dataset directory.")
                file_path = input("Please enter the full path to your CSV file: ").strip()
                if not os.path.isfile(file_path):
                    print("Invalid file path. Exiting program.")
                    sys.exit(1)

        # Load the data
        df = load_and_explore_data(file_path)
        if df is None:
            print("Failed to load data. Exiting program.")
            sys.exit(1)

        # Feature engineering
        df_processed = feature_engineering(df)
        if df_processed is None:
            print("Feature engineering failed. Exiting program.")
            sys.exit(1)

        # Prepare data for KNN
        X_scaled, features, scaler = prepare_data_for_knn(df_processed)
        if X_scaled is None:
            print("Data preparation failed. Exiting program.")
            sys.exit(1)

        # Train KNN model
        knn_model = train_knn_model(X_scaled, n_neighbors=3)
        if knn_model is None:
            print("Model training failed. Exiting program.")
            sys.exit(1)

        print("\nRecommendation system successfully built!")

        while True:
            # Get user input
            print("\nLet's create a personalized fitness recommendation for you.")
            user_data = get_user_input()

            # Generate recommendations
            recommendations = generate_knn_recommendations(knn_model, user_data, features, scaler)

            if recommendations:
                personalized_rec = generate_personalized_recommendation(recommendations, user_data)
                explanation = explain_personalized_recommendation(personalized_rec, user_data)

                # Display recommendation
                formatted_rec = format_personalized_recommendation(personalized_rec, explanation)
                print(formatted_rec)

                # Show nearest neighbors for transparency
                print("\nSimilar profiles used for your recommendation:")
                for i, rec in enumerate(recommendations):
                    print(f"{i + 1}. Profile #{rec['Profile ID']} (Similarity: {rec['Similarity']:.2f})")
            else:
                print("Unable to generate recommendations. Please check your input data.")

            # Ask if user wants to try again
            retry = input("\nWould you like to try again with different information? (Yes/No): ").strip().lower()
            if retry != 'yes':
                break

    except Exception as e:
        print(f"An error occurred: {str(e)}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
